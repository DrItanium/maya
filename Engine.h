/*******************************************************/
/*      "C" Language Integrated Production System      */
/*                                                     */
/*             CLIPS Version 6.40  08/25/16            */
/*                                                     */
/*                 ENGINE HEADER FILE                  */
/*******************************************************/

/*************************************************************/
/* Purpose: Provides functionality primarily associated with */
/*   the run and focus commands.                             */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Gary D. Riley                                        */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Correction for FalseSymbol/TrueSymbol. DR0859  */
/*                                                           */
/*            Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: Removed DYNAMIC_SALIENCE, INCREMENTAL_RESET,   */
/*            and LOGICAL_DEPENDENCIES compilation flags.    */
/*                                                           */
/*            Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*            Added access functions to the HaltRules flag.  */
/*                                                           */
/*            Added EnvGetNextFocus, EnvGetFocusChanged, and */
/*            EnvSetFocusChanged functions.                  */
/*                                                           */
/*      6.30: Added additional developer statistics to help  */
/*            analyze join network performance.              */
/*                                                           */
/*            Removed pseudo-facts used in not CEs.          */
/*                                                           */
/*            Added context information for run functions.   */
/*                                                           */
/*            Added before rule firing callback function.    */
/*                                                           */
/*            Changed garbage collection algorithm.          */
/*                                                           */
/*            Changed integer type/precision.                */
/*                                                           */
/*            Added EnvHalt function.                        */
/*                                                           */
/*            Used gensprintf instead of sprintf.            */
/*                                                           */
/*            Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            Incremental reset is always enabled.           */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*************************************************************/

#ifndef _H_engine

#pragma once

#define _H_engine

typedef struct focalModule FocalModule;

#include "LogicalDependencies.h"
#include "Defrule.h"
#include "Network.h"
#include "Defmodule.h"
#include "Retract.h"

struct focalModule {
    Defmodule *theModule;
    struct defruleModule *theDefruleModule;
    FocalModule *next;
};

typedef struct ruleFiredFunctionItem RuleFiredFunctionItem;
typedef void RuleFiredFunction(const Environment&, Activation::Ptr , void *);

struct ruleFiredFunctionItem {
    const char *name;
    RuleFiredFunction *func;
    int priority;
    RuleFiredFunctionItem *next;
};

constexpr auto ENGINE_DATA = 18;

struct engineData : public EnvironmentModule {
    Defrule::Ptr ExecutingRule;
    bool HaltRules;
    struct joinNode *TheLogicalJoin;
    PartialMatch *TheLogicalBind;
    struct dependency *UnsupportedDataEntities;
    bool alreadyEntered;
    RuleFiredFunctionItem *ListOfAfterRuleFiresFunctions;
    RuleFiredFunctionItem *ListOfBeforeRuleFiresFunctions;
    FocalModule *CurrentFocus;
    bool FocusChanged;
#if DEBUGGING_FUNCTIONS
    bool WatchStatistics;
    bool WatchFocus;
#endif
    bool IncrementalResetInProgress;
    bool JoinOperationInProgress;
    PartialMatch *GlobalLHSBinds;
    PartialMatch *GlobalRHSBinds;
    struct joinNode *GlobalJoin;
    PartialMatch *GarbagePartialMatches;
    struct alphaMatch *GarbageAlphaMatches;
    bool AlreadyRunning;
#if DEVELOPER
    long leftToRightComparisons;
    long rightToLeftComparisons;
    long leftToRightSucceeds;
    long rightToLeftSucceeds;
    long leftToRightLoops;
    long rightToLeftLoops;
    long findNextConflictingComparisons;
    long betaHashHTSkips;
    long betaHashListSkips;
    long unneededMarkerCompare;
#endif
};
RegisterEnvironmentModule(engineData, ENGINE_DATA, Engine);

constexpr auto MAX_PATTERNS_CHECKED = 64;
long long Run(const Environment&, long long);
bool AddAfterRuleFiresFunction(const Environment&, const char *,
                               RuleFiredFunction *, int, void *);
bool RemoveAfterRuleFiresFunction(const Environment&, const char *);
bool AddBeforeRuleFiresFunction(const Environment&, const char *,
                                RuleFiredFunction *, int, void *);
bool RemoveBeforeRuleFiresFunction(const Environment&, const char *);
RuleFiredFunctionItem *AddRuleFiredFunctionToCallList(const Environment&, const char *, int, RuleFiredFunction *,
                                                      RuleFiredFunctionItem *, void *);
RuleFiredFunctionItem *RemoveRuleFiredFunctionFromCallList(const Environment&, const char *,
                                                           RuleFiredFunctionItem *, bool *);
void DeallocateRuleFiredCallList(const Environment&, RuleFiredFunctionItem *);
void InitializeEngine(const Environment&);
void SetBreak(Defrule::Ptr );
void Halt(const Environment&);
bool RemoveBreak(Defrule::Ptr );
void RemoveAllBreakpoints(const Environment&);
void ShowBreaks(const Environment&, const char *, Defmodule *);
bool DefruleHasBreakpoint(Defrule::Ptr );
void RunCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void SetBreakCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void RemoveBreakCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ShowBreaksCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void HaltCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void FocusCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ClearFocusStackCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ClearFocusStack(const Environment&);
FocalModule *GetNextFocus(const Environment&, FocalModule *);
const char *FocalModuleName(FocalModule *);
Defmodule *FocalModuleModule(FocalModule *);
void Focus(Defmodule *);
bool GetFocusChanged(const Environment&);
void SetFocusChanged(const Environment&, bool);
void ListFocusStackCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ListFocusStack(const Environment&, const char *);
void GetFocusStackFunction(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void GetFocusStack(const Environment&, CLIPSValue *);
void PopFocusFunction(const Environment&theEnv, UDFContext *context, UDFValue *ret);
Defmodule *PopFocus(const Environment&);
bool GetHaltRules(const Environment&);
void SetHaltRules(const Environment&, bool);
Activation::Ptr NextActivationToFire(const Environment&);

#endif /* _H_engine */






