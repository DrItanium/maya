/**
 * @file
 * Frontend to the rv32 assembly to i960 assembly translator application
 * @copyright
 * maya-app
 * Copyright (c) 2012-2025, Joshua Scoggins
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
#include "platform/os.h"
extern "C" {
    #include "clips/clips.h"
}
#include "electron/Environment.h"
#include "fs/path.h"
#include <boost/program_options.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <list>
#include <tao/pegtl.hpp>

namespace pegtl = tao::pegtl;
// original version generated by github copilot for simplicity
namespace rv32_grammar {
    using namespace pegtl;

    // Whitespace and comments
    struct ws : star<space> {};
    struct comment_line : seq<one<';', '#'>, until<eolf>> {};
    struct comment_c_multiline : seq<one<'/'>, one<'*'>, until<seq<one<'*'>, one<'/'>>>> {};
    struct comment : sor<comment_line, comment_c_multiline> {};
    struct opt_ws : star<sor<space, comment>> {};

    // Identifiers (labels, instructions, etc.)
    struct identifier : seq<plus<sor<alpha, one<'_','.'>>>, star<sor<alnum, one<'_','.'>>>> {};
    // Registers
    struct gpr : sor<
        seq<one<'x'>, one<'0'>>, // x0
        seq<one<'x'>, one<'1','2'>, digit>, // x10-x29
        seq<one<'x'>, one<'3'>, one<'0','1'>>, // x30-x31
        seq<one<'x'>, digit>, // x1-x9
        istring<'z','e','r','o'>,  // x0
        istring<'r','a'>,    // x1
        istring<'s','p'>,    // x2
        istring<'g','p'>,    // x3
        istring<'t','p'>,    // x4
        istring<'t','0'>,    // x5
        istring<'t','1'>,    // x6
        istring<'t','2'>,    // x7
        istring<'s','0'>,    // x8
        istring<'s','1'>,    // x9
        istring<'a','0'>,    // x10
        istring<'a','1'>,    // x11
        istring<'a','2'>,    // x12
        istring<'a','3'>,    // x13
        istring<'a','4'>,    // x14
        istring<'a','5'>,    // x15
        istring<'a','6'>,    // x16
        istring<'a','7'>,    // x17
        istring<'s','2'>,    // x18
        istring<'s','3'>,    // x19
        istring<'s','4'>,    // x20
        istring<'s','5'>,    // x21
        istring<'s','6'>,    // x22
        istring<'s','7'>,    // x23
        istring<'s','8'>,    // x24
        istring<'s','9'>,    // x25
        istring<'s','1','0'>,   // x26
        istring<'s','1','1'>,   // x27
        istring<'t','3'>,    // x28
        istring<'t','4'>,    // x29
        istring<'t','5'>,    // x30
        istring<'t','6'>     // x31
    > {};;

    struct fpr : sor<
            seq<one<'f'>, one<'0'>>, // f0
            seq<one<'f'>, one<'1','2'>, digit>, // f10-f29
            seq<one<'f'>, one<'3'>, one<'0','1'>>, // f30-f31
            seq<one<'f'>, digit>, // f1-f9
            istring<'f','t','0'>,   // f0
            istring<'f','t','1'>,   // f1
            istring<'f','t','2'>,   // f2
            istring<'f','t','3'>,   // f3
            istring<'f','t','4'>,   // f4
            istring<'f','t','5'>,   // f5
            istring<'f','t','6'>,   // f6
            istring<'f','t','7'>,   // f7
            istring<'f','s','0'>,   // f8
            istring<'f','s','1'>,   // f9
            istring<'f','a','0'>,   // f10
            istring<'f','a','1'>,   // f11
            istring<'f','a','2'>,   // f12
            istring<'f','a','3'>,   // f13
            istring<'f','a','4'>,   // f14
            istring<'f','a','5'>,   // f15
            istring<'f','a','6'>,   // f16
            istring<'f','a','7'>,   // f17
            istring<'f','s','2'>,   // f18
            istring<'f','s','3'>,   // f19
            istring<'f','s','4'>,   // f20
            istring<'f','s','5'>,   // f21
            istring<'f','s','6'>,   // f22
            istring<'f','s','7'>,   // f23
            istring<'f','s','8'>,   // f24
            istring<'f','s','9'>,   // f25
            istring<'f','s','1','0'>, // f26
            istring<'f','s','1','1'>, // f27
            istring<'f','t','8'>,   // f28
            istring<'f','t','9'>,   // f29
            istring<'f','t','1','0'>, // f30
            istring<'f','t','1','1'>  // f31
        > {};

    // Immediate values (decimal, hex, or binary)
    struct imm_dec : plus<digit> {};
    struct imm_hex : seq<istring<'0','x'>, plus<xdigit>> {};
    struct imm_bin : seq<istring<'0','b'>, plus<one<'0','1'>>> {};
    struct immediate : sor<imm_hex, imm_bin, imm_dec> {};

    // Directives (e.g., .text, .data)
    struct directive : seq<one<'.'>, identifier> {};

    // Label (e.g., label:)
    struct label : seq<identifier, one<':'>> {};

    // Instruction (mnemonic + operands)
    struct operand : sor<gpr, fpr, immediate, identifier> {};
    struct operand_list : list<operand, one<','>, ws> {};
    struct instruction : seq<identifier, opt_ws, opt<operand_list>> {};

    // Line: directive, label, instruction, or comment
    struct line_content : sor<
        directive,
        label,
        instruction
    > { };
    struct line : seq<opt_ws, opt<line_content>, opt_ws, opt<comment>, eolf> {};

    // Grammar entry point
    struct grammar : must<star<line>> {};
}


#if   UNIX_V || LINUX || DARWIN || UNIX_7 || WIN_GCC || WIN_MVC
#include <signal.h>
#endif

/***************************************/
/* LOCAL INTERNAL FUNCTION DEFINITIONS */
/***************************************/

#if UNIX_V || LINUX || DARWIN || UNIX_7 || WIN_GCC || WIN_MVC
   static void                    CatchCtrlC(int);
#endif

/***************************************/
/* LOCAL INTERNAL VARIABLE DEFINITIONS */
/***************************************/

Electron::Environment mainEnv;
/****************************************/
/* main: Starts execution of the expert */
/*   system development environment.    */
/****************************************/
int main(int argc, char *argv[]) {
#if UNIX_V || LINUX || DARWIN || UNIX_7 || WIN_GCC || WIN_MVC
    signal(SIGINT, CatchCtrlC);
#endif
    using PathVector = std::vector<Neutron::Path>;
    try {
        boost::program_options::options_description desc{"Options"};
        //clang-format off
        desc.add_options()
            ("help,h", "Help screen")
            ("include,I", boost::program_options::value<PathVector>(), "add the given path to the back of include path")
            ("working-dir,w", boost::program_options::value<Neutron::Path>()->default_value("."),
             "Set the root of this application")
            ("repl,r", boost::program_options::bool_switch()->default_value(false),
             "Enter into the repl instead of invoking the standard design loop")
            ("batch,f", boost::program_options::value<PathVector>(), "files to batch")
            ("batch-star", boost::program_options::value<PathVector>(), "files to batch*")
            ("f2", boost::program_options::value<PathVector>(), "files to batch*")
            ("load,l", boost::program_options::value<PathVector>(), "files to load");
        boost::program_options::variables_map vm;
        boost::program_options::store(boost::program_options::parse_command_line(argc, argv, desc), vm);
        boost::program_options::notify(vm);
        //clang-format on
        if (vm.count("help")) {
            std::cerr << desc << std::endl;
            return 1;
        }
        if (vm.count("include")) {
            for (const auto &path: vm["include"].as<PathVector>()) {
                mainEnv.addToIncludePathBack(path);
            }
        }
        auto value = vm["working-dir"].as<Neutron::Path>();
        mainEnv.addToIncludePathFront(value);
        Neutron::Path initLocation{value / "init.clp"};
        if (!Neutron::exists(initLocation)) {
            std::cerr << "ERROR: " << initLocation << " does not exist!" << std::endl;
            return 1;
        }
        if (!mainEnv.batchFile(initLocation)) {
            std::cerr << "ERROR: Failed to batch " << initLocation << std::endl;
            return 1;
        }
        // okay so we have loaded the init.clp

        if (vm.count("batch")) {
            for (const auto &path: vm["batch"].as<PathVector>()) {
                if (!mainEnv.batchFile(path, false)) {
                    std::cerr << "couldn't batch "  << path << std::endl;
                    return 1;
                }
            }
        }
        if (vm.count("batch-star")) {
            for (const auto &path: vm["batch-star"].as<PathVector>()) {
                if (!mainEnv.batchFile(path)) {
                    std::cerr << "couldn't batch* " << path <<  std::endl;
                    return 1;
                }
            }
        }
        if (vm.count("f2")) {
            for (const auto &path: vm["f2"].as<PathVector>()) {
                if (!mainEnv.batchFile(path)) {
                    std::cerr << "couldn't batch* " << path <<  std::endl;
                    return 1;
                }
            }
        }
        if (vm.count("load")) {
            for (const auto& path : vm["load"].as<PathVector>()) {
                mainEnv.loadFile(path);
            }
        }
        bool enableRepl = vm["repl"].as<bool>();
        if (enableRepl) {
            std::cout << "REPL MODE" << std::endl;
            std::cout << "NOTE: begin and reset must be invoked manually" << std::endl;
            CommandLoop(mainEnv);
            return -1;
        } else {
            mainEnv.call("begin");
            mainEnv.reset();
            mainEnv.run(-1);
        }
        // unlike normal CLIPS, the environment will automatically clean itself up
        return 0;
    } catch (const Neutron::Exception& ex) {
        std::cerr << ex.what() << std::endl;
        return 1;
    } catch (const boost::program_options::error& ex) {
        std::cerr << ex.what() << std::endl;
        return 1;
    }
}

#if UNIX_V || LINUX || DARWIN || UNIX_7 || WIN_GCC || WIN_MVC || DARWIN
/***************/
/* CatchCtrlC: */
/***************/
static void CatchCtrlC(
        int sgnl)
{
    SetHaltExecution(mainEnv,true);
    CloseAllBatchSources(mainEnv);
    signal(SIGINT,CatchCtrlC);
}
#endif
