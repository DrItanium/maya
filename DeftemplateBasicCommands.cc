/*******************************************************/
/*      "C" Language Integrated Production System      */
/*                                                     */
/*            CLIPS Version 6.40  07/02/18             */
/*                                                     */
/*          DEFTEMPLATE BASIC COMMANDS MODULE          */
/*******************************************************/

/*************************************************************/
/* Purpose: Implements core commands for the deftemplate     */
/*   construct such as clear, reset, save, undeftemplate,    */
/*   ppdeftemplate, list-deftemplates, and                   */
/*   get-deftemplate-list.                                   */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Gary D. Riley                                        */
/*                                                           */
/* Contributing Programmer(s):                               */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*            Changed name of variable log to logName        */
/*            because of Unix compiler warnings of shadowed  */
/*            definitions.                                   */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*            Corrected code to remove compiler warnings     */
/*            when ENVIRONMENT_API_ONLY flag is set.         */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*      6.40: Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*            Removed initial-fact support.                  */
/*                                                           */
/*            Pretty print functions accept optional logical */
/*            name argument.                                 */
/*                                                           */
/*************************************************************/

#include "Setup.h"

#if DEFTEMPLATE_CONSTRUCT

#include <cstdio>
#include <cstring>

#include "ArgumentAccess.h"
#include "Construct.h"
#include "Construct.h"
#include "Construct.h"
#include "Environment.h"
#include "ExternalFunctions.hxx"
#include "Fact.h"
#include "MemoryAllocation.h"
#include "Multifield.h"
#include "Router.h"
#include "Scanner.h"
#if BLOAD_AND_BSAVE
#include "DeftemplateBinarySaveLoad.h"
#endif
#include "Deftemplate.h"
#include "DeftemplateParser.h"
#include "DeftemplateUtilities.h"

#include "DeftemplateBasicCommands.h"

/***************************************/
/* LOCAL INTERNAL FUNCTION DEFINITIONS */
/***************************************/

static void SaveDeftemplates(const Environment::Ptr&, Defmodule *, const char *, void *);

/*********************************************************************/
/* DeftemplateBasicCommands: Initializes basic deftemplate commands. */
/*********************************************************************/
void DeftemplateBasicCommands(
        const Environment::Ptr&theEnv) {
    AddSaveFunction(theEnv, "deftemplate", SaveDeftemplates, 10, nullptr);

    AddUDF(theEnv, "get-deftemplate-list", "m", 0, 1, "y", GetDeftemplateListFunction);
    AddUDF(theEnv, "undeftemplate", "v", 1, 1, "y", UndeftemplateCommand);
    AddUDF(theEnv, "deftemplate-module", "y", 1, 1, "y", DeftemplateModuleFunction);

#if DEBUGGING_FUNCTIONS
    AddUDF(theEnv, "list-deftemplates", "v", 0, 1, "y", ListDeftemplatesCommand);
    AddUDF(theEnv, "ppdeftemplate", "vs", 1, 2, ";y;ldsyn", PPDeftemplateCommand);
#endif

#if (BLOAD_AND_BSAVE)
    DeftemplateBinarySetup(theEnv);
#endif

}

/**********************************************/
/* SaveDeftemplates: Deftemplate save routine */
/*   for use with the save command.           */
/**********************************************/
static void SaveDeftemplates(
        const Environment::Ptr&theEnv,
        Defmodule *theModule,
        const char *logicalName,
        void *context) {
    SaveConstruct(theEnv, theModule, logicalName, DeftemplateData(theEnv)->DeftemplateConstruct);
}

/**********************************************/
/* UndeftemplateCommand: H/L access routine   */
/*   for the undeftemplate command.           */
/**********************************************/
void UndeftemplateCommand(
        const Environment::Ptr&theEnv,
        UDFContext *context,
        UDFValue *returnValue) {
    UndefconstructCommand(context, "undeftemplate", DeftemplateData(theEnv)->DeftemplateConstruct);
}

/************************************/
/* Undeftemplate: C access routine  */
/*   for the undeftemplate command. */
/************************************/
bool Undeftemplate(
        Deftemplate *theDeftemplate,
        const Environment::Ptr&allEnv) {
    Environment theEnv;

    if (theDeftemplate == nullptr) {
        theEnv = allEnv;
        return Undefconstruct(theEnv, nullptr, DeftemplateData(theEnv)->DeftemplateConstruct);
    } else {
        theEnv = theDeftemplate->header.env;
        return Undefconstruct(theEnv, &theDeftemplate->header, DeftemplateData(theEnv)->DeftemplateConstruct);
    }
}

/****************************************************/
/* GetDeftemplateListFunction: H/L access routine   */
/*   for the get-deftemplate-list function.         */
/****************************************************/
void GetDeftemplateListFunction(
        const Environment::Ptr&theEnv,
        UDFContext *context,
        UDFValue *returnValue) {
    GetConstructListFunction(context, returnValue, DeftemplateData(theEnv)->DeftemplateConstruct);
}

/********************************************/
/* GetDeftemplateList: C access routine for */
/*   the get-deftemplate-list function.     */
/********************************************/
void GetDeftemplateList(
        const Environment::Ptr&theEnv,
        CLIPSValue *returnValue,
        Defmodule *theModule) {
    UDFValue result;

    GetConstructList(theEnv, &result, DeftemplateData(theEnv)->DeftemplateConstruct, theModule);
    NormalizeMultifield(theEnv, &result);
    returnValue->value = result.value;
}

/***************************************************/
/* DeftemplateModuleFunction: H/L access routine   */
/*   for the deftemplate-module function.          */
/***************************************************/
void DeftemplateModuleFunction(
        const Environment::Ptr&theEnv,
        UDFContext *context,
        UDFValue *returnValue) {
    returnValue->value = GetConstructModuleCommand(context, "deftemplate-module", DeftemplateData(theEnv)->DeftemplateConstruct);
}

#if DEBUGGING_FUNCTIONS

/**********************************************/
/* PPDeftemplateCommand: H/L access routine   */
/*   for the ppdeftemplate command.           */
/**********************************************/
void PPDeftemplateCommand(
        const Environment::Ptr&theEnv,
        UDFContext *context,
        UDFValue *returnValue) {
    PPConstructCommand(context, "ppdeftemplate", DeftemplateData(theEnv)->DeftemplateConstruct, returnValue);
}

/***************************************/
/* PPDeftemplate: C access routine for */
/*   the ppdeftemplate command.        */
/***************************************/
bool PPDeftemplate(
        const Environment::Ptr&theEnv,
        const char *deftemplateName,
        const char *logicalName) {
    return (PPConstruct(theEnv, deftemplateName, logicalName, DeftemplateData(theEnv)->DeftemplateConstruct));
}

/*************************************************/
/* ListDeftemplatesCommand: H/L access routine   */
/*   for the list-deftemplates command.          */
/*************************************************/
void ListDeftemplatesCommand(
        const Environment::Ptr&theEnv,
        UDFContext *context,
        UDFValue *returnValue) {
    ListConstructCommand(context, DeftemplateData(theEnv)->DeftemplateConstruct);
}

/****************************************/
/* ListDeftemplates: C access routine   */
/*   for the list-deftemplates command. */
/****************************************/
void ListDeftemplates(
        const Environment::Ptr&theEnv,
        const char *logicalName,
        Defmodule *theModule) {
    ListConstruct(theEnv, DeftemplateData(theEnv)->DeftemplateConstruct, logicalName, theModule);
}

/********************************************************/
/* DeftemplateGetWatch: C access routine for retrieving */
/*   the current watch value of a deftemplate.          */
/********************************************************/
bool DeftemplateGetWatch(
        Deftemplate *theTemplate) {
    return theTemplate->watch;
}

/******************************************************/
/* DeftemplateSetWatch:  C access routine for setting */
/*   the current watch value of a deftemplate.        */
/******************************************************/
void DeftemplateSetWatch(
        Deftemplate *theTemplate,
        bool newState) {
    theTemplate->watch = newState;
}

/**********************************************************/
/* DeftemplateWatchAccess: Access routine for setting the */
/*   watch flag of a deftemplate via the watch command.   */
/**********************************************************/
bool DeftemplateWatchAccess(
        const Environment::Ptr&theEnv,
        int code,
        bool newState,
        Expression *argExprs) {
#if MAC_XCD
#pragma unused(code)
#endif

    return ConstructSetWatchAccess(theEnv, DeftemplateData(theEnv)->DeftemplateConstruct, newState, argExprs,
                                   (ConstructGetWatchFunction *) DeftemplateGetWatch,
                                   (ConstructSetWatchFunction *) DeftemplateSetWatch);
}

/*************************************************************************/
/* DeftemplateWatchPrint: Access routine for printing which deftemplates */
/*   have their watch flag set via the list-watch-items command.         */
/*************************************************************************/
bool DeftemplateWatchPrint(
        const Environment::Ptr&theEnv,
        const char *logName,
        int code,
        Expression *argExprs) {
#if MAC_XCD
#pragma unused(code)
#endif

    return ConstructPrintWatchAccess(theEnv, DeftemplateData(theEnv)->DeftemplateConstruct, logName, argExprs,
                                     (ConstructGetWatchFunction *) DeftemplateGetWatch,
                                     (ConstructSetWatchFunction *) DeftemplateSetWatch);
}

#endif /* DEBUGGING_FUNCTIONS */

#endif /* DEFTEMPLATE_CONSTRUCT */


