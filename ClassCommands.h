/*******************************************************/
/*      "C" Language Integrated Production System      */
/*                                                     */
/*             CLIPS Version 6.40  08/25/16            */
/*                                                     */
/*              CLASS COMMANDS HEADER FILE             */
/*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*      6.30: Borland C (IBM_TBC) and Metrowerks CodeWarrior */
/*            (MAC_MCW, IBM_MCW) are no longer supported.    */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*            Changed find construct functionality so that   */
/*            imported modules are search when locating a    */
/*            named construct.                               */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*************************************************************/

#ifndef _H_classcom

#pragma once

#define _H_classcom

enum ClassDefaultsMode {
    CONVENIENCE_MODE,
    CONSERVATION_MODE
};

#include "Construct.h"
#include "Defmodule.h"
#include "Object.h"
#include "Symbol.h"

const char *DefclassName(Defclass *);
const char *DefclassPPForm(Defclass *);
struct defmoduleItemHeader
*GetDefclassModule(const Environment&, Defclass *);
const char *DefclassModule(Defclass *);
CLIPSLexeme *GetDefclassNamePointer(Defclass *);
void SetNextDefclass(Defclass *, Defclass *);
void SetDefclassPPForm(const Environment&, Defclass *, char *);

Defclass *FindDefclass(const Environment&, const char *);
Defclass *FindDefclassInModule(const Environment&, const char *);
Defclass *LookupDefclassByMdlOrScope(const Environment&, const char *);
Defclass *LookupDefclassInScope(const Environment&, const char *);
Defclass *LookupDefclassAnywhere(const Environment&, Defmodule *, const char *);
bool DefclassInScope(const Environment&, Defclass *, Defmodule *);
Defclass *GetNextDefclass(const Environment&, Defclass *);
bool DefclassIsDeletable(Defclass *);

void UndefclassCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
ClassDefaultsMode SetClassDefaultsMode(const Environment&, ClassDefaultsMode);
ClassDefaultsMode GetClassDefaultsMode(const Environment&);
void GetClassDefaultsModeCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void SetClassDefaultsModeCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);

#if DEBUGGING_FUNCTIONS
void PPDefclassCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ListDefclassesCommand(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void ListDefclasses(const Environment&, const char *, Defmodule *);
bool DefclassGetWatchInstances(Defclass *);
void DefclassSetWatchInstances(Defclass *, bool);
bool DefclassGetWatchSlots(Defclass *);
void DefclassSetWatchSlots(Defclass *, bool);
bool DefclassWatchAccess(const Environment&, int, bool, Expression *);
bool DefclassWatchPrint(const Environment&, const char *, int, Expression *);
#endif

void GetDefclassListFunction(const Environment&theEnv, UDFContext *context, UDFValue *ret);
void GetDefclassList(const Environment&, CLIPSValue *, Defmodule *);
bool Undefclass(Defclass *, const Environment&);
bool HasSuperclass(Defclass *, Defclass *);

CLIPSLexeme *CheckClassAndSlot(UDFContext *, const char *, Defclass **);

void SaveDefclasses(const Environment&, Defmodule *, const char *, void * context = nullptr);

#endif /* _H_classcom */
