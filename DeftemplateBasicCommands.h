/*******************************************************/
/*      "C" Language Integrated Production System      */
/*                                                     */
/*             CLIPS Version 6.40  08/25/16            */
/*                                                     */
/*       DEFTEMPLATE BASIC COMMANDS HEADER FILE        */
/*******************************************************/

/*************************************************************/
/* Purpose: Implements core commands for the deftemplate     */
/*   construct such as clear, reset, save, undeftemplate,    */
/*   ppdeftemplate, list-deftemplates, and                   */
/*   get-deftemplate-list.                                   */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Gary D. Riley                                        */
/*                                                           */
/* Contributing Programmer(s):                               */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*            Changed name of variable log to logName        */
/*            because of Unix compiler warnings of shadowed  */
/*            definitions.                                   */
/*                                                           */
/*      6.24: Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*            Corrected code to remove compiler warnings     */
/*            when ENVIRONMENT_API_ONLY flag is set.         */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*************************************************************/

#ifndef _H_tmpltbsc

#pragma once

#define _H_tmpltbsc

#include "Evaluation.h"
#include "Deftemplate.h"

void DeftemplateBasicCommands(const Environment::Ptr&);
void UndeftemplateCommand(const Environment::Ptr&theEnv, UDFContext *context, UDFValue *ret);
bool Undeftemplate(Deftemplate *, const Environment::Ptr&);
void GetDeftemplateListFunction(const Environment::Ptr&theEnv, UDFContext *context, UDFValue *ret);
void GetDeftemplateList(const Environment::Ptr&, CLIPSValue *, Defmodule *);
void DeftemplateModuleFunction(const Environment::Ptr&theEnv, UDFContext *context, UDFValue *ret);
#if DEBUGGING_FUNCTIONS
void PPDeftemplateCommand(const Environment::Ptr&theEnv, UDFContext *context, UDFValue *ret);
bool PPDeftemplate(const Environment::Ptr&, const char *, const char *);
void ListDeftemplatesCommand(const Environment::Ptr&theEnv, UDFContext *context, UDFValue *ret);
void ListDeftemplates(const Environment::Ptr&, const char *, Defmodule *);
bool DeftemplateGetWatch(Deftemplate *);
void DeftemplateSetWatch(Deftemplate *, bool);
bool DeftemplateWatchAccess(const Environment::Ptr&, int, bool, Expression *);
bool DeftemplateWatchPrint(const Environment::Ptr&, const char *, int, Expression *);
#endif

#endif /* _H_tmpltbsc */


